<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="pswp__bg"></div>
  <div class="pswp__scroll-wrap">
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">
        <div class="pswp__counter"></div>
        <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
        {% comment %}<button class="pswp__button pswp__button--share" title="Share"></button>{% endcomment %}
        <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
        <div class="pswp__preloader">
          <div class="pswp__preloader__icn">
            <div class="pswp__preloader__cut">
              <div class="pswp__preloader__donut"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
        <div class="pswp__share-tooltip"></div>
      </div>
      <button class="pswp__button--arrow--left" title="Previous (arrow left)"></button>
      <button class="pswp__button--arrow--right" title="Next (arrow right)"></button>
      <div class="pswp__caption">
        <div class="pswp__caption__center"></div>
      </div>
    </div>
  </div>
</div>

<style>
/*! PhotoSwipe main CSS by Dmitry Semenov | photoswipe.com | MIT license */
.pswp {
  display: none;
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  overflow: hidden;
  -ms-touch-action: none;
  touch-action: none;
  z-index: 1500;
  -webkit-text-size-adjust: 100%;
  -webkit-backface-visibility: hidden;
  outline: 0
}

.pswp * {
  -webkit-box-sizing: border-box;
  box-sizing: border-box
}

.pswp img {
  max-width: none
}

.pswp--animate_opacity {
  opacity: .001;
  will-change: opacity;
  -webkit-transition: opacity 333ms cubic-bezier(.4, 0, .22, 1);
  transition: opacity 333ms cubic-bezier(.4, 0, .22, 1)
}

.pswp--open {
  display: block
}

.pswp--zoom-allowed .pswp__img {
  cursor: -webkit-zoom-in;
  cursor: -moz-zoom-in;
  cursor: zoom-in
}

.pswp--zoomed-in .pswp__img {
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: grab
}

.pswp--dragging .pswp__img {
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
  cursor: grabbing
}

.pswp__bg {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: #fff;
  opacity: 0;
  -webkit-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-backface-visibility: hidden;
  will-change: opacity
}

.pswp__scroll-wrap {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: hidden
}

.pswp__container,
.pswp__zoom-wrap {
  -ms-touch-action: none;
  touch-action: none;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0
}

.pswp__container,
.pswp__img {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none
}

.pswp__zoom-wrap {
  position: absolute;
  width: 100%;
  -webkit-transform-origin: left top;
  -ms-transform-origin: left top;
  transform-origin: left top;
  -webkit-transition: -webkit-transform 333ms cubic-bezier(.4, 0, .22, 1);
  transition: transform 333ms cubic-bezier(.4, 0, .22, 1)
}

.pswp__bg {
  will-change: opacity;
  -webkit-transition: opacity 333ms cubic-bezier(.4, 0, .22, 1);
  transition: opacity 333ms cubic-bezier(.4, 0, .22, 1)
}

.pswp--animated-in .pswp__bg,
.pswp--animated-in .pswp__zoom-wrap {
  -webkit-transition: none;
  transition: none
}

.pswp__container,
.pswp__zoom-wrap {
  -webkit-backface-visibility: hidden
}

.pswp__item {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  overflow: hidden
}

.pswp__img {
  position: absolute;
  width: auto;
  height: auto;
  top: 0;
  left: 0
}

.pswp__img--placeholder {
  -webkit-backface-visibility: hidden
}

.pswp__img--placeholder--blank {
  background: #222
}

.pswp--ie .pswp__img {
  width: 100% !important;
  height: auto !important;
  left: 0;
  top: 0
}

.pswp__error-msg {
  position: absolute;
  left: 0;
  top: 50%;
  width: 100%;
  text-align: center;
  font-size: 14px;
  line-height: 16px;
  margin-top: -8px;
  color: #ccc
}

.pswp__error-msg a {
  color: #ccc;
  text-decoration: underline
}

.pswp__button {
  width: 44px;
  height: 44px;
  position: relative;
  background: 0 0;
  cursor: pointer;
  overflow: visible;
  -webkit-appearance: none;
  display: block;
  border: 0 !important;
  padding: 0;
  margin: 0;
  float: right;
  opacity: .75;
  -webkit-transition: opacity .2s;
  transition: opacity .2s;
  -webkit-box-shadow: none;
  box-shadow: none
}

.pswp__button:focus,
.pswp__button:hover {
  opacity: 1
}

.pswp__button:active {
  outline: 0;
  opacity: .9
}

.pswp__button::-moz-focus-inner {
  padding: 0;
  border: 0
}

.pswp__ui--over-close .pswp__button--close {
  opacity: 1
}

.pswp__button,
.pswp__button--arrow--left:before,
.pswp__button--arrow--right:before {
  background:url("{{ 'default-skin.png' | asset_url }}") 0 0 no-repeat;
  background-size: 264px 88px;
  width: 44px;
  height: 44px
}

@media (-webkit-min-device-pixel-ratio:1.1),
(-webkit-min-device-pixel-ratio:1.09375),
(min-resolution:105dpi),
(min-resolution:1.1dppx) {

  .pswp--svg .pswp__button,
  .pswp--svg .pswp__button--arrow--left:before,
  .pswp--svg .pswp__button--arrow--right:before {
    background-image:url("{{ 'default-skin.svg' | asset_url }}")
  }

  .pswp--svg .pswp__button--arrow--left,
  .pswp--svg .pswp__button--arrow--right {
    background: 0 0
  }
}

.pswp__button--close {
  background-position: 0 -44px
}

.pswp__button--share {
  background-position: -44px -44px
}

.pswp__button--fs {
  display: none
}

.pswp--supports-fs .pswp__button--fs {
  display: block
}

.pswp--fs .pswp__button--fs {
  background-position: -44px 0
}

.pswp__button--zoom {
  display: none;
  background-position: -88px 0
}

.pswp--zoom-allowed .pswp__button--zoom {
  display: block
}

.pswp--zoomed-in .pswp__button--zoom {
  background-position: -132px 0
}

.pswp--touch .pswp__button--arrow--left,
.pswp--touch .pswp__button--arrow--right {
  visibility: hidden
}

.pswp__button--arrow--left,
.pswp__button--arrow--right {
  background: 0 0;
  top: 50%;
  margin-top: -50px;
  width: 70px;
  height: 100px;
  position: absolute
}

.pswp__button--arrow--left {
  left: 0
}

.pswp__button--arrow--right {
  right: 0
}

.pswp__button--arrow--left:before,
.pswp__button--arrow--right:before {
  content: '';
  top: 35px;
  background-color: rgba(255, 255, 255, .7);
  height: 30px;
  width: 32px;
  position: absolute
}

.pswp__button--arrow--left:before {
  left: 6px;
  background-position: -138px -44px
}

.pswp__button--arrow--right:before {
  right: 6px;
  background-position: -94px -44px
}

.pswp__counter,
.pswp__share-modal {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none
}

.pswp__share-modal {
  display: block;
  background: rgba(0, 0, 0, .5);
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  padding: 10px;
  position: absolute;
  z-index: 1600;
  opacity: 0;
  -webkit-transition: opacity .25s ease-out;
  transition: opacity .25s ease-out;
  -webkit-backface-visibility: hidden;
  will-change: opacity
}

.pswp__share-modal--hidden {
  display: none
}

.pswp__share-tooltip {
  z-index: 1620;
  position: absolute;
  background: #fff;
  top: 56px;
  border-radius: 2px;
  display: block;
  width: auto;
  right: 44px;
  -webkit-box-shadow: 0 2px 5px rgba(0, 0, 0, .25);
  box-shadow: 0 2px 5px rgba(0, 0, 0, .25);
  -webkit-transform: translateY(6px);
  -ms-transform: translateY(6px);
  transform: translateY(6px);
  -webkit-transition: -webkit-transform .25s;
  transition: transform .25s;
  -webkit-backface-visibility: hidden;
  will-change: transform
}

.pswp__share-tooltip a {
  display: block;
  padding: 8px 12px;
  color: #252a2b;
  text-decoration: none;
  font-size: 14px;
  line-height: 18px
}

.pswp__share-tooltip a:hover {
  text-decoration: none;
  color: #252a2b
}

.pswp__share-tooltip a:first-child {
  border-radius: 2px 2px 0 0
}

.pswp__share-tooltip a:last-child {
  border-radius: 0 0 2px 2px
}

.pswp__share-modal--fade-in {
  opacity: 1
}

.pswp__share-modal--fade-in .pswp__share-tooltip {
  -webkit-transform: translateY(0);
  -ms-transform: translateY(0);
  transform: translateY(0)
}

.pswp--touch .pswp__share-tooltip a {
  padding: 16px 12px
}

a.pswp__share--facebook:before {
  content: '';
  display: block;
  width: 0;
  height: 0;
  position: absolute;
  top: -12px;
  right: 15px;
  border: 6px solid transparent;
  border-bottom-color: #fff;
  -webkit-pointer-events: none;
  -moz-pointer-events: none;
  pointer-events: none
}

a.pswp__share--facebook:hover {
  background: #3e5c9a;
  color: #fff
}

a.pswp__share--facebook:hover:before {
  border-bottom-color: #3e5c9a
}

a.pswp__share--twitter:hover {
  background: #55acee;
  color: #fff
}

a.pswp__share--pinterest:hover {
  background: #ccc;
  color: #ce272d
}

a.pswp__share--download:hover {
  background: #ddd
}

.pswp__counter {
  position: absolute;
  left: 0;
  top: 0;
  height: 44px;
  font-size: 13px;
  line-height: 44px;
  color: #fff;
  opacity: .75;
  padding: 0 10px
}

.pswp__caption {
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  min-height: 44px
}

.pswp__caption small {
  font-size: 11px;
  color: #bbb
}

.pswp__caption__center {
  text-align: left;
  max-width: 420px;
  margin: 0 auto;
  font-size: 13px;
  padding: 10px;
  line-height: 20px;
  color: #ccc
}

.pswp__caption--empty {
  display: none
}

.pswp__caption--fake {
  visibility: hidden
}

.pswp__preloader {
  width: 44px;
  height: 44px;
  position: absolute;
  top: 0;
  left: 50%;
  margin-left: -22px;
  opacity: 0;
  -webkit-transition: opacity .25s ease-out;
  transition: opacity .25s ease-out;
  will-change: opacity;
  direction: ltr
}

.pswp__preloader__icn {
  width: 20px;
  height: 20px;
  margin: 12px
}

.pswp__preloader--active {
  opacity: 1
}

.pswp__preloader--active .pswp__preloader__icn {
  background:url("{{ 'preloader.gif' | asset_url }}") 0 0 no-repeat
}

.pswp--css_animation .pswp__preloader--active {
  opacity: 1
}

.pswp--css_animation .pswp__preloader--active .pswp__preloader__icn {
  -webkit-animation: clockwise .5s linear infinite;
  animation: clockwise .5s linear infinite
}

.pswp--css_animation .pswp__preloader--active .pswp__preloader__donut {
  -webkit-animation: donut-rotate 1s cubic-bezier(.4, 0, .22, 1) infinite;
  animation: donut-rotate 1s cubic-bezier(.4, 0, .22, 1) infinite
}

.pswp--css_animation .pswp__preloader__icn {
  background: 0 0;
  opacity: .75;
  width: 14px;
  height: 14px;
  position: absolute;
  left: 15px;
  top: 15px;
  margin: 0
}

.pswp--css_animation .pswp__preloader__cut {
  position: relative;
  width: 7px;
  height: 14px;
  overflow: hidden
}

.pswp--css_animation .pswp__preloader__donut {
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 14px;
  height: 14px;
  border: 2px solid #fff;
  border-radius: 50%;
  border-left-color: transparent;
  border-bottom-color: transparent;
  position: absolute;
  top: 0;
  left: 0;
  background: 0 0;
  margin: 0
}

@media screen and (max-width:1024px) {
  .pswp__preloader {
    position: relative;
    left: auto;
    top: auto;
    margin: 0;
    float: right
  }
}

@-webkit-keyframes clockwise {
  0% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg)
  }
}

@keyframes clockwise {
  0% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }

  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg)
  }
}

@-webkit-keyframes donut-rotate {
  0% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }

  50% {
    -webkit-transform: rotate(-140deg);
    transform: rotate(-140deg)
  }

  100% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }
}

@keyframes donut-rotate {
  0% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }

  50% {
    -webkit-transform: rotate(-140deg);
    transform: rotate(-140deg)
  }

  100% {
    -webkit-transform: rotate(0);
    transform: rotate(0)
  }
}

.pswp__ui {
  -webkit-font-smoothing: auto;
  visibility: visible;
  opacity: 1;
  z-index: 1550
}

.pswp__top-bar {
  position: absolute;
  left: 0;
  top: 0;
  height: 44px;
  width: 100%
}

.pswp--has_mouse .pswp__button--arrow--left,
.pswp--has_mouse .pswp__button--arrow--right,
.pswp__caption,
.pswp__top-bar {
  -webkit-backface-visibility: hidden;
  will-change: opacity;
  -webkit-transition: opacity 333ms cubic-bezier(.4, 0, .22, 1);
  transition: opacity 333ms cubic-bezier(.4, 0, .22, 1)
}

.pswp--has_mouse .pswp__button--arrow--left,
.pswp--has_mouse .pswp__button--arrow--right {
  visibility: visible
}

.pswp__caption,
.pswp__top-bar {
  background-color: rgba(255, 255, 255, 0.7)
}

.pswp__ui--fit .pswp__caption,
.pswp__ui--fit .pswp__top-bar {
  background-color: rgba(255, 255, 255, 0.5)
}

.pswp__ui--idle .pswp__top-bar {
  opacity: 0
}

.pswp__ui--idle .pswp__button--arrow--left,
.pswp__ui--idle .pswp__button--arrow--right {
  opacity: 0
}

.pswp__ui--hidden .pswp__button--arrow--left,
.pswp__ui--hidden .pswp__button--arrow--right,
.pswp__ui--hidden .pswp__caption,
.pswp__ui--hidden .pswp__top-bar {
  opacity: .001
}

.pswp__ui--one-slide .pswp__button--arrow--left,
.pswp__ui--one-slide .pswp__button--arrow--right,
.pswp__ui--one-slide .pswp__counter {
  display: none
}

.pswp__element--disabled {
  display: none !important
}

.pswp--minimal--dark .pswp__top-bar {
  background: 0 0
}

.pswp__button--arrow--left,
.pswp__button--arrow--right {
  border: 0;
}

.pswp__counter {
  color: $body-text-color !important;
}
</style>

<script>
var startPhotoSwipe = function () {
  /*
  var initPhotoSwipeFromDOM = function(gallerySelector) {

    // find nearest parent element
    var closest = function closest(el, fn) {
      return el && ( fn(el) ? el : closest(el.parentNode, fn) );
    };

    // triggers when user clicks on thumbnail
    var onThumbnailsClick = function(e) {
      e = e || window.event;
      e.preventDefault ? e.preventDefault() : e.returnValue = false;

      var eTarget = e.target || e.srcElement;

      // find root element of slide
      var clickedListItem = closest(eTarget, function(el) {
        return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
      });

      if(!clickedListItem) {
        return;
      }

      // find index of clicked item by looping through all child nodes
      // alternatively, you may define index via data- attribute
      var clickedGallery = clickedListItem.parentNode,
          childNodes = clickedListItem.parentNode.childNodes,
          numChildNodes = childNodes.length,
          nodeIndex = 0,
          index;

      index = clickedListItem.dataset.swiperSlideIndex;



      if(index >= 0) {
        // open PhotoSwipe if valid index found
        openPhotoSwipe( index, clickedGallery );
      }
      return false;
    };

    // parse picture index and gallery index from URL (#&pid=1&gid=2)
    var photoswipeParseHash = function() {
      var hash = window.location.hash.substring(1),
          params = {};

      if(hash.length < 5) {
        return params;
      }

      var vars = hash.split('&');
      for (var i = 0; i < vars.length; i++) {
        if(!vars[i]) {
          continue;
        }
        var pair = vars[i].split('=');
        if(pair.length < 2) {
          continue;
        }
        params[pair[0]] = pair[1];
      }

      if(params.gid) {
        params.gid = parseInt(params.gid, 10);
      }

      return params;
    };

    var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
      var pswpElement = document.querySelectorAll('.pswp')[0],
          gallery,
          options,
          items;

      $('body').addClass('pswp--opened');
      items = [
        {% for image in product.images %}
        {% if image.src contains 'lifestyle' or image.src contains 'Lifestyle' %}
        {
        smallImage: {
          src: '{{ image | img_url: '1024x' }}',
            w:1024,
            h:683
        },
        mediumImage: {
          src: '{{ image | img_url: '1400x' }}',
            w:1400,
            h:933
        },
        originalImage: {
            src: '{{ image | product_img_url: 'master' }}',
            w: 3000,
            h: 2000
        }
        {% else %}
        {
        smallImage: {
          src: '{{ image | img_url: '1024x1024' }}',
            w:1024,
            h:1024
        },
        mediumImage: {
          src: '{{ image | img_url: '1400x1400' }}',
            w:1400,
            h:1400
        },
        originalImage: {
            src: '{{ image | product_img_url: 'master' }}',
            w: 3000,
            h: 3000
        }
        {% endif %}
        {% if forloop.last == true %} }{% else %} }, {% endif %}
        {% endfor %}
        ];

      // define options (if needed)
      options = {
        // define gallery index (for URL)
        galleryUID: galleryElement.getAttribute('data-pswp-uid'),
        showHideOpacity:true,
        getThumbBoundsFn:false,
        history: false,
        barsSize: {
          top:44,
          bottom:0
        },
        getDoubleTapZoom: function(isMouseClick, item) {

          if(isMouseClick) {
            // is mouse click on image or zoom icon
            // zoom to original
            return 0.65;
            // e.g. for 1400px image:
            // 0.5 - zooms to 700px
            // 2   - zooms to 2800px
          } else {
            // is double-tap
            // zoom to original if initial zoom is less than 0.7x,
            // otherwise to 1.5x, to make sure that double-tap gesture always zooms image
            return item.initialZoomLevel < 0.7 ? 0.65 : 1;
          }
        }
      };

      // PhotoSwipe opened from URL
      if(fromURL) {
        if(options.galleryPIDs) {
          // parse real index when custom PIDs are used
          // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
          for(var j = 0; j < items.length; j++) {
            if(items[j].pid == index) {
              options.index = j;
              break;
            }
          }
        } else {
          // in URL indexes start from 1
          options.index = parseInt(index, 10) - 1;
        }
      } else {
        options.index = parseInt(index, 10);
      }

      // exit if index not found
      if( isNaN(options.index) ) {
        return;
      }

      if(disableAnimation) {
        options.showAnimationDuration = 0;
      }

      // Pass data to PhotoSwipe and initialize it
      gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);

      // create variable that will store real size of viewport
      var realViewportWidth,
          useLargeImages = false,
          useMediumImages = false,
          firstResize = true,
          imageSrcWillChange;

      gallery.listen('close', function(){
        $('body').removeClass('pswp--opened');
      });
      gallery.listen('beforeResize', function() {

        // calculate real pixels when size changes
        realViewportWidth = gallery.viewportSize.x * window.devicePixelRatio;

        // Code below is needed if you want image to switch dynamically on window.resize

        // Find out if current images need to be changed
        if(useLargeImages && realViewportWidth < 2208) {
          useMediumImages = false;
          useLargeImages = true;
          imageSrcWillChange = true;
        }
        else if(!useLargeImages && realViewportWidth < 2208 && realViewportWidth >= 1401) {
            useLargeImages = false;
            useMediumImages = true;
            imageSrcWillChange = true;
        }
        else if(!useLargeImages && realViewportWidth >= 2208) {
            useMediumImages = false;
            useLargeImages = true;
            imageSrcWillChange = true;
        }

        // Invalidate items only when source is changed and when it's not the first update
        if(imageSrcWillChange && !firstResize) {
            // invalidateCurrItems sets a flag on slides that are in DOM,
            // which will force update of content (image) on window.resize.
            gallery.invalidateCurrItems();
        }

        if(firstResize) {
            firstResize = false;
        }

        imageSrcWillChange = false;

      });

      // gettingData event fires each time PhotoSwipe retrieves image source & size
      gallery.listen('gettingData', function(index, item) {

        // Set image source & size based on real viewport width
        if( useLargeImages ) {
          item.src = item.originalImage.src;
          item.w = item.originalImage.w;
          item.h = item.originalImage.h;
        }
        else if( useMediumImages ) {
          item.src = item.mediumImage.src;
          item.w = item.mediumImage.w;
          item.h = item.mediumImage.h;
        }
        else {
          item.src = item.smallImage.src;
          item.w = item.smallImage.w;
          item.h = item.smallImage.h;
        }

        // It doesn't really matter what will you do here,
        // as long as item.src, item.w and item.h have valid values.
        // Just avoid http requests in this listener, as it fires quite often

      });
      gallery.init();
    };

    // loop through all gallery elements and bind events
    var galleryElements = document.querySelectorAll( gallerySelector );

    for(var i = 0, l = galleryElements.length; i < l; i++) {
      galleryElements[i].setAttribute('data-pswp-uid', i+1);
      galleryElements[i].onclick = onThumbnailsClick;
    }

    // Parse URL and open gallery if it contains #&pid=3&gid=1
    var hashData = photoswipeParseHash();
    if(hashData.pid && hashData.gid) {
      openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
    }
  };
  */
  var initPhotoSwipeFromDOM = function(gallerySelector) {

  // parse slide data (url, title, size ...) from DOM elements
  // (children of gallerySelector)
  var parseThumbnailElements = function(el) {
    var thumbElements = el.childNodes,
    numNodes = thumbElements.length,
    items = [],
    figureEl,
    linkEl,
    size,
    item;

    for(var i = 0; i < numNodes; i++) {

  figureEl = thumbElements[i]; // <figure> element

  // include only element nodes
  if(figureEl.nodeType !== 1) {
    continue;
  }

  linkEl = figureEl.children[0]; // <a> element

  size = linkEl.getAttribute('data-size').split('x');

  // create slide object
  item = {
    src: linkEl.getAttribute('href'),
    w: parseInt(size[0], 10),
    h: parseInt(size[1], 10)
  };



  if(figureEl.children.length > 1) {
  // <figcaption> content
  item.title = figureEl.children[1].innerHTML;
  }

  if(linkEl.children.length > 0) {
  // <img> thumbnail element, retrieving thumbnail url
  item.msrc = linkEl.children[0].getAttribute('src');
  }

  item.el = figureEl; // save link to element for getThumbBoundsFn
  items.push(item);
  }

  return items;
  };

  // find nearest parent element
  var closest = function closest(el, fn) {
    return el && ( fn(el) ? el : closest(el.parentNode, fn) );
  };

  // triggers when user clicks on thumbnail
  var onThumbnailsClick = function(e) {
    e = e || window.event;
    e.preventDefault ? e.preventDefault() : e.returnValue = false;

    var eTarget = e.target || e.srcElement;

  // find root element of slide
  var clickedListItem = closest(eTarget, function(el) {
    return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
  });

  if(!clickedListItem) {
    return;
  }

  // find index of clicked item by looping through all child nodes
  // alternatively, you may define index via data- attribute
  var clickedGallery = clickedListItem.parentNode,
  childNodes = clickedListItem.parentNode.childNodes,
  numChildNodes = childNodes.length,
  nodeIndex = 0,
  index;

  for (var i = 0; i < numChildNodes; i++) {
    if(childNodes[i].nodeType !== 1) {
      continue;
    }

    if(childNodes[i] === clickedListItem) {
      index = nodeIndex;
      break;
    }
    nodeIndex++;
  }



  if(index >= 0) {
  // open PhotoSwipe if valid index found
  openPhotoSwipe( index, clickedGallery );
  }
  return false;
  };

  // parse picture index and gallery index from URL (#&pid=1&gid=2)
  var photoswipeParseHash = function() {
    var hash = window.location.hash.substring(1),
    params = {};

    if(hash.length < 5) {
      return params;
    }

    var vars = hash.split('&');
    for (var i = 0; i < vars.length; i++) {
      if(!vars[i]) {
        continue;
      }
      var pair = vars[i].split('=');
      if(pair.length < 2) {
        continue;
      }
      params[pair[0]] = pair[1];
    }

    if(params.gid) {
      params.gid = parseInt(params.gid, 10);
    }

    return params;
  };

  var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
    $('body').addClass('pswp--opened');
    var pswpElement = document.querySelectorAll('.pswp')[0],
    gallery,
    options,
    items;

    items = parseThumbnailElements(galleryElement);

  // define options (if needed)
  // options = {

  //   // define gallery index (for URL)
  //   galleryUID: galleryElement.getAttribute('data-pswp-uid'),

  //   getThumbBoundsFn: function(index) {
  //     // See Options -> getThumbBoundsFn section of documentation for more info
  //     var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
  //     pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
  //     rect = thumbnail.getBoundingClientRect();

  //     return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
  //   }

  // };

  options = {
    // define gallery index (for URL)
    galleryUID: galleryElement.getAttribute('data-pswp-uid'),
    showHideOpacity:true,
    getThumbBoundsFn:false,
    history: false,
    barsSize: {
      top:44,
      bottom:0
    },
    closeOnScroll: true,
    getDoubleTapZoom: function(isMouseClick, item) {
      if(isMouseClick) {
        // is mouse click on image or zoom icon
        // zoom to original
        return 0.65;
        // e.g. for 1400px image:
        // 0.5 - zooms to 700px
        // 2   - zooms to 2800px
      } else {
        // is double-tap
        // zoom to original if initial zoom is less than 0.7x,
        // otherwise to 1.5x, to make sure that double-tap gesture always zooms image
        return item.initialZoomLevel < 0.7 ? 1 : 1.5;
      }
    }
  };

  // PhotoSwipe opened from URL
  if(fromURL) {
    if(options.galleryPIDs) {
      // parse real index when custom PIDs are used
      // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
      for(var j = 0; j < items.length; j++) {
        if(items[j].pid == index) {
          options.index = j;
          break;
        }
      }
    } else {
    // in URL indexes start from 1
    options.index = parseInt(index, 10) - 1;
    }
  } else {
    options.index = parseInt(index, 10);
  }

  // exit if index not found
  if( isNaN(options.index) ) {
    return;
  }

  if(disableAnimation) {
    options.showAnimationDuration = 0;
  }

  // Pass data to PhotoSwipe and initialize it
  gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
  gallery.init();
  };

  // loop through all gallery elements and bind events
  var galleryElements = document.querySelectorAll( gallerySelector );

  for(var i = 0, l = galleryElements.length; i < l; i++) {
    galleryElements[i].setAttribute('data-pswp-uid', i+1);
    galleryElements[i].onclick = onThumbnailsClick;
  }

  // Parse URL and open gallery if it contains #&pid=3&gid=1
  var hashData = photoswipeParseHash();
  if(hashData.pid && hashData.gid) {
    openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
  }
  };
  // execute above function
  initPhotoSwipeFromDOM('.photoswipe-gallery');
};

if (document.readyState === 'complete' ) {
  setTimeout(startPhotoSwipe, 1);
} else {
  document.addEventListener('DOMContentLoaded', startPhotoSwipe);
}
</script>
